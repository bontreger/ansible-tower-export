---
- name: check for Ansible Automation Platform Setup Bundle variable
  fail:
    msg: "ansible_automation_platform_installation_setup_bundle not defined! Please specify the path of the Ansible Automation Platform Setup Bundle in ansible_automation_platform_installation_setup_bundle."
  when: ansible_automation_platform_installation_setup_bundle is not defined

- name: check for Ansible Automation Platform Setup Bundle
  stat:
    path: "{{ ansible_automation_platform_installation_setup_bundle }}"
  register: ansible_automation_platform_installation_setup_bundle_stat

- name: fail when Ansible Automation Platform Setup Bundle does not exist
  fail:
    msg: "Ansible Automation Platform Setup Bundle not found!"
  when: ansible_automation_platform_installation_setup_bundle_stat.stat.exists == false

- block:
  - name: create temporary working directory
    tempfile:
      suffix: temp_aap_installer
      state: directory
    register: temp_folder
    delegate_to: localhost

  - name: Set Setup Bundle Path Fact
    ansible.builtin.set_fact:
      setup_bundle_path: "{{ temp_folder.path }}/{{ ansible_automation_platform_installation_setup_bundle | regex_replace('.tar.gz','') |regex_replace ('.*/','') }}"

  - name: Extract Ansible Automation Platform Setup Bundle
    ansible.builtin.unarchive:
      src: "{{ ansible_automation_platform_installation_setup_bundle }}"
      dest: "{{ temp_folder.path }}"
    delegate_to: localhost

  - name: Add Database Host to Setup Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: database
      option: "{{ ansible_automation_platform_installation_database_host }}"
      allow_no_value: true

  - name: Add AutomationHub Host to Setup Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: automationhub
      option: "{{ ansible_automation_platform_installation_automationhub_host }}"
      allow_no_value: true

  - name: Add Become Configuration to Setup Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: "all:vars"
      option: "ansible_become"
      value: "true"
      no_extra_spaces: true
    when: ansible_automation_platform_installation_inventory.become == true

  - name: Add Firewall Management Settings for Controller to Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: "all:vars"
      option: "{{ controller_firewall_type: firewalld }}"
      value: "{{ ansible_automation_platform_installation_controller_firewall_management }}"
      no_extra_spaces: true
    when: ansible_automation_platform_installation_controller_firewall_management is defined

  - name: Add Firewall Management Settings for Automation Hub to Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: "all:vars"
      option: "pulp_configure_firewall"
      value: "{{ ansible_automation_platform_installation_automation_hub_firewall_management }}"
      no_extra_spaces: true
    when: ansible_automation_platform_installation_automation_hub_firewall_management is defined

  - name: Add Node Configuration to Setup Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: "all:vars"
      option: "{{ item.key }}"
      value: "{{ item.value }}"
      no_extra_spaces: true
    loop: "{{ lookup('dict', ansible_automation_platform_installation_inventory.all_vars) }}"
    no_log: true

  - name: Add General SSL Configuration to Setup Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: "all:vars"
      option: "custom_ca_cert"
      value: "{{ ansible_automation_platform_installation_inventory.ssl_general.custom_ca_cert }}"
      no_extra_spaces: true
    when: ansible_automation_platform_installation_ssl_ca_cert is defined

  - name: Add Private AutomationHub SSL Configuration to Setup Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: "all:vars"
      option: "{{ item.key }}"
      value: "{{ item.value }}"
      no_extra_spaces: true
    loop: "{{ lookup('dict', ansible_automation_platform_installation_inventory.ssl_automationhub) }}"
    no_log: true
    when: ( ansible_automation_platform_installation_automationhub_ssl_cert is defined ) and ( ansible_automation_platform_installation_automationhub_ssl_key is defined )

  - name: Add Automation Controller SSL Configuration to Setup Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: "all:vars"
      option: "{{ item.key }}"
      value: "{{ item.value }}"
      no_extra_spaces: true
    loop: "{{ lookup('dict', ansible_automation_platform_installation_inventory.ssl_controller) }}"
    no_log: true
    when: ( ansible_automation_platform_installation_controller_ssl_cert is defined ) and ( ansible_automation_platform_installation_controller_ssl_key is defined )

  - name: Add Postgresql SSL Configuration to Setup Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: "all:vars"
      option: "{{ item.key }}"
      value: "{{ item.value }}"
      no_extra_spaces: true
    loop: "{{ lookup('dict', ansible_automation_platform_installation_inventory.ssl_postgresql) }}"
    no_log: true
    when: ( ansible_automation_platform_installation_postgres_ssl_enabled is defined ) and ( ansible_automation_platform_installation_postgres_ssl_cert is defined ) and ( ansible_automation_platform_installation_postgres_ssl_key is defined)

  - name: Remove Localhost from Automation Controller List
    ansible.builtin.lineinfile:
      path: "{{ setup_bundle_path }}/inventory"
      regexp: "^localhost ansible_connection=local"
      state: absent

  - name: Add Controller Host to Setup Inventory
    community.general.ini_file:
      path: "{{ setup_bundle_path }}/inventory"
      section: automationcontroller
      option: "{{ item }}"
      allow_no_value: true
    loop: "{{ ansible_automation_platform_installation_controller_hosts }}"
    when: ansible_automation_platform_installation_controller_hosts is defined

  - name: Run Ansible Automation Platform Setup
    ansible.builtin.shell:
      cmd: "{{ setup_bundle_path }}/setup.sh"
      chdir: "{{ setup_bundle_path }}"
    register: database_host_setup
    delegate_to: localhost

  always:
    - name: remove temporary working directory
      file:
        path: "{{ temp_folder.path }}"
        state: absent
      delegate_to: localhost
